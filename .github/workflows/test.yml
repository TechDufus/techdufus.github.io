name: 🧪 End-to-End Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    # Run tests daily at 6 AM UTC to catch any production issues
    - cron: '0 6 * * *'

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm install

    - name: 🎭 Install Playwright Browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: 🧪 Run Playwright tests
      run: npx playwright test --project=${{ matrix.browser }}
      env:
        CI: true

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.browser }}
        path: playwright-report/
        retention-days: 30

    - name: 📸 Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-screenshots-${{ matrix.browser }}
        path: test-results/
        retention-days: 30

  mobile-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        device: ['Mobile Chrome', 'Mobile Safari']
        
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm install

    - name: 🎭 Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: 📱 Run Mobile Playwright tests
      run: npx playwright test --project="${{ matrix.device }}"
      env:
        CI: true

    - name: 📊 Upload mobile test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-mobile-${{ matrix.device }}
        path: playwright-report/
        retention-days: 30

  lighthouse:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 📦 Install Lighthouse CI
      run: npm install -g @lhci/cli@0.12.x

    - name: 🔍 Run Lighthouse CI
      run: |
        lhci autorun --upload.target=temporary-public-storage || echo "Lighthouse CI failed, but continuing..."
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  accessibility:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm install

    - name: 🎭 Install Playwright
      run: npx playwright install --with-deps chromium

    - name: ♿ Run Accessibility tests
      run: npx playwright test --grep "@accessibility"
      env:
        CI: true

  visual-regression:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm install

    - name: 🎭 Install Playwright
      run: npx playwright install --with-deps chromium

    - name: 📸 Run Visual Regression tests
      run: npx playwright test --grep "@visual"
      env:
        CI: true

    - name: 🖼️ Upload visual test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: visual-regression-results
        path: test-results/
        retention-days: 30

  test-summary:
    if: always()
    needs: [test, mobile-tests, lighthouse, accessibility, visual-regression]
    runs-on: ubuntu-latest
    
    steps:
    - name: 📊 Test Results Summary
      run: |
        echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Desktop Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Mobile Tests | ${{ needs.mobile-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Lighthouse | ${{ needs.lighthouse.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Accessibility | ${{ needs.accessibility.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Visual Regression | ${{ needs.visual-regression.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.mobile-tests.result }}" == "failure" ]]; then
          echo "❌ Some tests failed. Check the individual job logs for details." >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "✅ All critical tests passed!" >> $GITHUB_STEP_SUMMARY
        fi