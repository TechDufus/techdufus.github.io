#!/bin/bash

# Generate tag pages for all tags used in blog posts
# Usage: ./scripts/generate-tags

set -e

POSTS_DIR="_posts"
TAGS_DIR="tags"

# Check if posts directory exists
if [ ! -d "$POSTS_DIR" ]; then
    echo "Error: Posts directory '$POSTS_DIR' not found"
    exit 1
fi

# Create tags directory if it doesn't exist
mkdir -p "$TAGS_DIR"

# Function to extract tags from frontmatter
extract_tags() {
    local file="$1"
    # Extract YAML frontmatter and get tags line, then clean it up
    awk '/^---$/{flag++} flag==1 && /^tags:/{
        gsub(/^tags: *\[ */, ""); 
        gsub(/ *\] *$/, ""); 
        gsub(/["'"'"']/, ""); 
        gsub(/, */, "\n"); 
        print; 
        exit
    }' "$file"
}

# Function to convert to lowercase
to_lowercase() {
    echo "$1" | tr '[:upper:]' '[:lower:]'
}

echo "Scanning posts for tags..."

# Keep track of processed tags to avoid duplicates using a temporary file
PROCESSED_TAGS_FILE=$(mktemp)

# Process each markdown file in posts directory
for post_file in "$POSTS_DIR"/*.md; do
    # Skip if no markdown files exist
    [ ! -f "$post_file" ] && continue
    
    # Extract tags from post
    tags_line=$(extract_tags "$post_file")
    
    # Skip if no tags found
    [ -z "$tags_line" ] && continue
    
    # Process each tag (tags are separated by newlines now)
    while IFS= read -r tag; do
        # Skip empty lines
        [ -z "$tag" ] && continue
        
        # Trim whitespace
        tag=$(echo "$tag" | sed 's/^[ \t]*//;s/[ \t]*$//')
        tag_lower=$(to_lowercase "$tag")
        
        # Skip if we've already processed this tag
        if grep -q "^$tag_lower$" "$PROCESSED_TAGS_FILE" 2>/dev/null; then
            continue
        fi
        
        # Mark as processed
        echo "$tag_lower" >> "$PROCESSED_TAGS_FILE"
        
        # Tag page file path (use lowercase for filename)
        tag_file="$TAGS_DIR/$tag_lower.html"
        
        # Create tag page if it doesn't exist
        if [ ! -f "$tag_file" ]; then
            echo "[+] Generating #$tag page"
            
            cat > "$tag_file" << EOF
---
layout: tag
section-type: tag
title: $tag
---
## Tag
EOF
        fi
    done <<< "$tags_line"
done

echo "Tag page generation complete!"
echo "Generated files are in: $TAGS_DIR/"

# Clean up temporary file
rm -f "$PROCESSED_TAGS_FILE"
